(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{386:function(t,e,s){"use strict";s.r(e);var v=s(42),a=Object(v.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"checkout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#checkout"}},[t._v("#")]),t._v(" CHECKOUT")]),t._v(" "),s("p",[s("code",[t._v("checkout")]),t._v("意思是牵出, 涉及到文件变更, 更新索引...操作一般都涉及到"),s("code",[t._v("checkout")])]),t._v(" "),s("p",[s("code",[t._v("checkout")]),t._v("主要做了以下3个方面的事情")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("更新工作区的文件")])]),t._v(" "),s("li",[s("strong",[t._v("单纯切换分支")])]),t._v(" "),s("li",[s("strong",[t._v("创建并切换分支")])])]),t._v(" "),s("h2",{attrs:{id:"更新工作区的文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新工作区的文件"}},[t._v("#")]),t._v(" 更新工作区的文件")]),t._v(" "),s("p",[s("code",[t._v("git checkout <commit-SHA-1 = HEAD> (--) <glob filepath>")])]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("commit-SHA-1")]),t._v("(默认是HEAD索引的"),s("code",[t._v("SHA-1")]),t._v(")索引的"),s("code",[t._v("glob filepath")]),t._v("的文件快照覆盖当前工作区的"),s("code",[t._v("glob filepath")]),t._v("文件")]),t._v(" "),s("p",[t._v("有时需要在"),s("code",[t._v("glob filepath")]),t._v("前加入"),s("code",[t._v("--")]),t._v(", 这时为了将"),s("code",[t._v("glob filepath")]),t._v("和"),s("code",[t._v("branchname")]),t._v("做区分")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("举个🌰")]),t._v(" "),s("p",[t._v("可能我们会遇到文件名和分支名重合的情况(release), 这时的"),s("code",[t._v("git checkout release")]),t._v("会被GIT理解为切换到"),s("code",[t._v("release")]),t._v("分支")]),t._v(" "),s("p",[t._v("而不是将"),s("code",[t._v("HEAD")]),t._v("索引的"),s("code",[t._v("commit-SHA-1")]),t._v("中的"),s("code",[t._v("release快照")]),t._v("覆盖当前"),s("code",[t._v("release文件")])]),t._v(" "),s("p",[t._v("所以要用"),s("code",[t._v("git checkout -- release")])]),t._v(" "),s("hr"),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("- 注意")]),t._v(" "),s("p",[t._v("如果我们指定"),s("code",[t._v("SHA-1")]),t._v("，其应该是"),s("code",[t._v("commit")]),t._v("类型")]),t._v(" "),s("p",[t._v("即:")]),t._v(" "),s("p",[s("code",[t._v("git cat-file -t <SHA-1>")])]),t._v(" "),s("p",[t._v("commit")])]),t._v(" "),s("h2",{attrs:{id:"切换分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[t._v("#")]),t._v(" 切换分支")]),t._v(" "),s("p",[s("code",[t._v("git checkout [options] <branchname | commit-SHA-1>")])]),t._v(" "),s("p",[t._v("使用当前命令可以切换到"),s("code",[t._v("branchname")]),t._v("分支上, 或者切换到"),s("code",[t._v("commit-SHA-1")])]),t._v(" "),s("p",[t._v("实际上它就是更新"),s("code",[t._v("HEAD")]),t._v("文件的内容(更新为"),s("code",[t._v("refs/heads/branchname")]),t._v("或者"),s("code",[t._v("commit-SHA-1")]),t._v(")")]),t._v(" "),s("p",[t._v("如果切换为"),s("code",[t._v("commit-SHA-1")]),t._v(", 则会进入"),s("code",[t._v("detach HEAD")]),t._v("状态("),s("RouterLink",{attrs:{to:"/git/branch.html"}},[t._v("branch")]),t._v("中有提到)")],1),t._v(" "),s("p",[t._v("在"),s("code",[t._v("detach HEAD")]),t._v("中由于"),s("code",[t._v("HEAD")]),t._v("内存储的不是一个"),s("code",[t._v("branch")]),t._v("文件, 导致后续提交无法被索引, 相当于丢失")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("- 提示")]),t._v(" "),s("p",[t._v("切换分支时, 除了更新"),s("code",[t._v("HEAD")]),t._v("外")]),t._v(" "),s("p",[t._v("如果满足以下情况, 也期望将暂存区和工作区的内容带入新分支")]),t._v(" "),s("ul",[s("li",[t._v("暂存区/工作区的文件在当前分支和目标分支的最后一次的提交树对象中的"),s("code",[t._v("SHA-1")]),t._v("一致, 期望将暂存区和工作区的内容带入新分支")])]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前分支v1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" v1\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b v2\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# v2分支是基于当前v1分支创建的, 所以他们当前最新的提交记录中索引的`v1`的文件快照是一样的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个时候v1的缓存区内容'a' >> v1, 也会被带入v2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 否则GIT会提示需要提交当前暂存区的文件")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("如果不满足, 可以使用"),s("code",[t._v("-m | --merged")]),t._v("由GIT基于合并算法, 对其合并 "),s("strong",[t._v("可能会有冲突需要fix")])])]),t._v(" "),s("h3",{attrs:{id:"detach"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#detach"}},[t._v("#")]),t._v(" detach")]),t._v(" "),s("p",[s("code",[t._v("git checkout --detach master")]),t._v("会以"),s("code",[t._v("master")]),t._v("分支的最后一次提交"),s("code",[t._v("SHA-1")]),t._v("进入"),s("code",[t._v("detach HEAD")]),t._v("模式")]),t._v(" "),s("p",[t._v("相当于")]),t._v(" "),s("p",[s("code",[t._v("git checkout master@{0}")])]),t._v(" "),s("h3",{attrs:{id:"merged"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#merged"}},[t._v("#")]),t._v(" merged")]),t._v(" "),s("p",[s("code",[t._v("git checkout (-m | --merged) dev1")]),t._v(", 如果暂存区或工作区存在文件变更, 且不能自动带入到"),s("code",[t._v("dev1")]),t._v("分支时适情况使用该命令")]),t._v(" "),s("p",[t._v("会将"),s("code",[t._v("currentbranch@{0}.commit-object.file")]),t._v("和"),s("code",[t._v("targetbranch@{0}.commit-object.file")]),t._v("以及"),s("code",[t._v("file")]),t._v("进行3路合并")]),t._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("- TODO")]),t._v(" "),s("p",[t._v("具体的合并策略, 目前还在学习中")]),t._v(" "),s("p",[t._v("有的文章说是简单的3路合并, 显然是不可能的")]),t._v(" "),s("p",[t._v("待具体阅读"),s("code",[t._v("git merge")]),t._v("时补充")])]),t._v(" "),s("h2",{attrs:{id:"创建并切换分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建并切换分支"}},[t._v("#")]),t._v(" 创建并切换分支")]),t._v(" "),s("p",[s("code",[t._v("git checkout [options] newbranch <start-point=HEAD>")])]),t._v(" "),s("p",[t._v("上面的命令会创建并且切换到新的分支, 同👆切换分支的提示内容, 有的时候也会检出当前分支的暂存区和工作区的内容")]),t._v(" "),s("p",[t._v("值得一提的是根据"),s("code",[t._v("options")]),t._v("的不同, "),s("code",[t._v("newbranch")]),t._v("并不只是一个本地的"),s("code",[t._v("branchname")]),t._v(", 有时候也会是一个远程分支的镜像"),s("code",[t._v("origin/branchname")]),t._v("("),s("code",[t._v("-t")]),t._v(")")]),t._v(" "),s("h3",{attrs:{id:"orphan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#orphan"}},[t._v("#")]),t._v(" orphan")]),t._v(" "),s("p",[t._v("这里我很推荐使用"),s("code",[t._v("orphan")]),t._v("参数在实际工作中, (看到那些乱七八糟的提交记录是真的烦...)")]),t._v(" "),s("p",[t._v("这个参数可以创建一个干净的"),s("code",[t._v("branch")]),t._v("(这里的干净是指没有任何的提交记录), 然后将指定分支的缓存区内容牵出到这个"),s("code",[t._v("branch")]),t._v("内")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# master")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout --orphan dev1\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -A\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'4'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n可以发现master和dev1没有公共祖先, 这意味着他们不能相互merge\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("在实际开发需求的时候, 肯定不是一气呵成的! 比如突然插别的需求, 参加需求评审, WC, 下楼放风都会中断开发过程")]),t._v(" "),s("p",[t._v("这个时候我都会将当前工作的代码提交, 这是由于(某次参加需求排期的时候, 同学将我开发了一点的代码删除了, 仅开玩笑也没实际写了多少. 以及该同学某次刚到公司不知道为啥执行了"),s("code",[t._v("git checkout .")]),t._v("把昨天晚上开发的内容扔了)所导致, 但是这样会导致提交历史混乱, 尤其当它被"),s("code",[t._v("merged")]),t._v("到master时, 污染了master的提交历史")]),t._v(" "),s("p",[t._v("这个时候就需要使用"),s("code",[t._v("orphan")]),t._v("参数了")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JIRA-123, master")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -orphan JIRA-123-orphan "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于master创建了一个新分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".                                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一些文件变更和提交")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b JIRA-123 master      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于master创建分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout JIRA-123-orphah@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检出JIRA-123-orphan的最新提交")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feat(xx): xxxx'")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 完成开发")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这样JIRA-123是给QA的提测分支, QA将JIRA-123merge到master上, 这样开发过程中那些无意义的提交历史就消失了")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 完成这个效果不一定需要使用orphan, 但是使用orphan有一个好处是 JIRA-123-orphan这个分支是无法合并到master上的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这会减少一些误操作")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("h3",{attrs:{id:"track"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#track"}},[t._v("#")]),t._v(" track")]),t._v(" "),s("p",[s("code",[t._v("git checkout --track <remote_branch_mirror>")])]),t._v(" "),s("p",[t._v("会创建并切换到一个和远程分支镜像同名的分支, 并建立上下游关系")]),t._v(" "),s("p",[s("code",[t._v("git checkout --track origin/dev1")]),t._v(" 将"),s("code",[t._v("origin/dev1")]),t._v("作为upstream branch创建新分支"),s("code",[t._v("dev1")]),t._v(", 并切换")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("如果需要建立不同名字的上下游关系, 需要使用"),s("code",[t._v("-b")])]),t._v(" "),s("p",[s("code",[t._v("git checkout --track -b dev1 origin/master")])]),t._v(" "),s("h3",{attrs:{id:"b-b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-b"}},[t._v("#")]),t._v(" b | B")]),t._v(" "),s("p",[s("code",[t._v("git checkout -b dev1 <start-point=HEAD>")])]),t._v(" "),s("p",[t._v("基于"),s("code",[t._v("start-point")]),t._v("创建"),s("code",[t._v("dev1")]),t._v("分支, 如果使用"),s("code",[t._v("-B")]),t._v("表示强制行为, 如果"),s("code",[t._v("dev1")]),t._v("已经存在则会覆盖")]),t._v(" "),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" ''")]),t._v(" "),s("p",[s("code",[t._v("git checkout branchname")])]),t._v(" "),s("p",[t._v("在前面("),s("code",[t._v("更新文件")]),t._v(", "),s("code",[t._v("创建分支")]),t._v(")2个部分, 我们都提到过形同格式的命令, 这里介绍的是它创建且切换分支的功能")]),t._v(" "),s("p",[s("code",[t._v("git checkout dev1")]),t._v("会进行如下操作")]),t._v(" "),s("p",[t._v("如果存在"),s("code",[t._v("refs/remotes/origin/dev1")]),t._v("GIT会以"),s("code",[t._v("origin/dev1")]),t._v("作为upstream branch 创建"),s("code",[t._v("dev1")]),t._v("分支并切换")]),t._v(" "),s("h2",{attrs:{id:"git-checkout-dev1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout-dev1"}},[t._v("#")]),t._v(" "),s("code",[t._v("git checkout dev1")])]),t._v(" "),s("p",[t._v("这里介绍一些"),s("code",[t._v("git checkout dev1")]),t._v("的执行逻辑")]),t._v(" "),s("ol",[s("li",[t._v("如果本地"),s("code",[t._v("dev1")]),t._v("分支存在, 那么其会切换到本地"),s("code",[t._v("dev1")]),t._v("分支")]),t._v(" "),s("li",[t._v("如果本地"),s("code",[t._v("dev1")]),t._v("分支不存在, 但是"),s("code",[t._v("refs/remotes/origin/dev1")]),t._v("存在, 其会创建"),s("code",[t._v("origin/dev1")]),t._v("的下游分支"),s("code",[t._v("dev1")]),t._v("并切换")]),t._v(" "),s("li",[t._v("如果"),s("code",[t._v("1")]),t._v("和"),s("code",[t._v("2")]),t._v("都不满足, 其会将"),s("code",[t._v("dev1")]),t._v("理解为文件, 尝试从"),s("code",[t._v("HEAD")]),t._v("检出"),s("code",[t._v("dev1")]),t._v("的快照覆盖工作区的"),s("code",[t._v("dev1")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);